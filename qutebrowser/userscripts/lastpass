#!/usr/bin/env python3

DESCRIPTION = """
Fills passwordws using [USERNAME]<Tab>[PASSWORD]. Requires LastPass CLI >=1.3.
""".strip()

EPILOG = """
WARNING: The login credentials are written to the debug log (qute://log) and
are viewable as a series of fake-key calls. If a crash report is submitted
then confidential information may be shared.
""".strip()

import argparse
import enum
import itertools
import json
import os
import re
import subprocess
import sys

# The rofi command to spawn. This returns the zero-indexed selected item,
# not the text.
ROFI_COMMAND = ["rofi", "-dmenu", "-i", "-format", "i"]

# The encoding for subprocess communication.
ENCODING = "utf-8"

# LastPass URLs not to show.
FILTER_URLS = [
    "http://group", # Password groups
    "http://sn"     # Secure notes
]

def printerr(s):
    print(s, file=sys.stderr)

class ExitCode(enum.IntEnum):
    SUCCESS = 0 # 0 is automatically returned on success
    FAILURE = 1 # 1 is automatically returned on exception
    NO_ENTRIES_FOUND = 2

def rofi(options):
    """
    Run the rofi command and then pipe the options into it. The selection that
    is made is returned.
    """
    return subprocess.run(ROFI_COMMAND,
            input="\n".join(options).encode(ENCODING),
            stdout=subprocess.PIPE).stdout.decode(ENCODING).strip()

def qutebrowser_cmd(cmd):
    """
    Write a command to qutebrowser.
    """
    with open(os.environ["QUTE_FIFO"], "w") as fifo:
        fifo.write(cmd + "\n")
        fifo.flush()

def qutebrowser_text(text):
    """
    Write a text sequence as keystrokes in qutebrowser.
    """
    for c in text:
        # Space needs to be quoted and all characters are escaped
        sequence = "\" \"" if c == " " else f"\{c}"
        qutebrowser_cmd(f"fake-key {sequence}")

class Entry:
    """
    Represents an entry from the LastPass CLI.
    """

    def __init__(self, data):
        """
        Takes a JSON entry from the LastPass CLI and stores it in a way that is
        easier to work with.
        """
        self.fullname          = data["fullname"]
        self.id                = data["id"]
        self.group             = data["group"]
        self.last_modified_gmt = data["last_modified_gmt"]
        self.last_touch        = data["last_touch"]
        self.name              = data["name"]
        self.note              = data["note"]
        self.password          = data["password"]
        self.url               = data["url"]
        self.username          = data["username"]

    def __str__(self):
        # The most important thing is that the password is not printed
        return "\n".join([
            f"fullname          = {self.fullname}",
            f"id                = {self.id}",
            f"group             = {self.group}",
            f"last_modified_gmt = {self.last_modified_gmt}",
            f"last_touch        = {self.last_touch}",
            f"name              = {self.name}",
            f"note              = {self.note}",
            f"password          = {'*' * 8 if self.password else '(empty)'}",
            f"url               = {self.url}",
            f"username          = {self.username}",
        ])

    def __repr__(self):
        return str(self)

def lpass_list():
    """
    Returns all of the LastPass entries as a list of Entry objects (in no
    particular order).
    """
    p = subprocess.run(["lpass", "show", "-x", "-j", "-G", ".*"],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if p.returncode:
        printerr(f"LastPass error: {p.stderr.decode(ENCODING).strip()}")
        return []
    out = p.stdout.decode(ENCODING).strip()
    es = list(map(Entry, json.loads(out)))
    es = list(filter(lambda e: e.url not in FILTER_URLS, es))
    return sorted(es, key=lambda e: e.name)

def fqdn(url):
    """
    Get the fully qualified domain name of a URL. If it cannot be found, the
    original URL is returned.
    """
    m = re.search(r"^(?:\w+:\/\/)?([\w.-]+)(?:\/.*)?$", url, re.IGNORECASE)
    return m.group(1) if m is not None else url

def bigram_similarity(q, p):
    """
    Computes the similarity of two strings based on the number of shared
    bigrams.
    """
    def bigrams(s):
        s = s.lower()
        return [s[i:i + 2] for i in range(len(s) - 1)]
    qb = bigrams(q)
    pb = bigrams(p)
    w = sum(map(lambda x: x[0] == x[1], itertools.product(qb, pb)))
    return (2 * w) / (len(qb) + len(pb))

def lpass_search(url):
    """
    Orders the results of `lpass_list` based on the relevancy to the URL. The
    result is a list of Entry objects sorted from most to least relevant.
    """
    query = fqdn(url).lower()
    weight = lambda e: bigram_similarity(fqdn(e.url), query)
    es = lpass_list()
    ws = map(lambda e: (e, weight(e)), es) # Add weights
    rs = sorted(ws, key=lambda e: e[1], reverse=True) # Sort by weights
    return list(map(lambda x: x[0], rs)) # Remove the weights

def prepare_options(es):
    """
    Format the options to display. This can change at any time, but the only
    thing that should remain the same is that the very first token is an
    integer that is the index of the entry in the list.
    """
    width = lambda key: max(map(lambda e: len(str(key(e))), es))
    wn  = width(lambda e: e.name)
    wu  = width(lambda e: e.url)
    wun = width(lambda e: e.username)
    f = "{{:{}}} {{:{}}} {{:{}}}".format(wn, wu, wun)
    return [f.format(e.name, e.url, e.username) for e in es]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=DESCRIPTION, epilog=EPILOG)
    parser.add_argument("url", nargs="?", default="")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--username", "-u", action="store_true",
            help="Only fill username")
    group.add_argument("--password", "-p", action="store_true",
            help="Only fill password")

    args = parser.parse_args()

    # Search for the URL or display the default if no URL is given
    if args.url:
        es = lpass_search(args.url)
    else:
        es = lpass_list()

    if not es:
        printerr("LastPass error: no entries found")
        sys.exit(ExitCode.NO_ENTRIES_FOUND)

    # Show the selection menu
    options = prepare_options(es)
    try:
        sel_index = int(rofi(options))
    except ValueError:
        # Nothing was selected
        sys.exit(ExitCode.SUCCESS)
    entry = es[sel_index]

    # When run outside of qutebrowser simply print the selected entry and exit
    if "QUTE_FIFO" not in os.environ:
        print(entry)
        sys.exit(ExitCode.SUCCESS)

    # Fill the fields in qutebrowser
    if args.username:
        qutebrowser_text(entry.username)
    elif args.password:
        qutebrowser_text(entry.password)
    else:
        qutebrowser_text(entry.username)
        qutebrowser_cmd("fake-key <Tab>")
        qutebrowser_text(entry.password)
    qutebrowser_cmd("enter-mode insert")
